var mySceneTLX;
var mySceneTLY;
var mySceneBRX;
var mySceneBRY;
var mySceneW;
var mySceneH;
var myCenterX;
var myCenterY;


var font,flag = Math.floor(Math.random()*100) ,text;
var flag2 = Math.floor(Math.random()*100);
var res = flag+flag2;


var numberLabel1;
var numberLabel2;
var minNumber, maxNumber, numberStep,num1,num2;

function initialiseScene()
{

    mySceneTLX = -10.0;
    mySceneTLY = 10.0;
    mySceneBRX = 10.0;
    mySceneBRY = -10.0;
    mySceneW   = (mySceneBRX - mySceneTLX);
    mySceneH   = (mySceneTLY - mySceneBRY);
    myCenterX  = (mySceneTLX + mySceneBRX) / 2.0;
    myCenterY  = (mySceneTLY + mySceneBRY) / 2.0;
    myCenterZ  = -2.0;

    PIEscene.background=new THREE.Color( 0xbfd1e5 );
    PIEscene.add(new THREE.AmbientLight(0x606060));
}
function loadFont()
{
    loader = new THREE.FontLoader();
    loader.load("fonts/optimer.json", function(response){
        font = response;
    });
}
function loadExperimentElements()
{

    PIEsetExperimentTitle("Two digit addition using money");
    PIEsetDeveloperName("Govind Daga");

    loadFont();
    initialiseScene();

    setSlider();
    PIEsetAreaOfInterest(mySceneTLX, mySceneTLY, mySceneBRX, mySceneBRY);

    // for texture



}

function getGeometry(data, size)
{
    geometry = new THREE.TextGeometry(data, {
            font : font,
            size : size ,
            height : 0.01,
            curveSegments : 3
    });
    return geometry;
}

function resetExperiment()
{

}

function updateExperimentElements(t, dt)
{
  if(font) {
  test();
}
}

function test()
{
  if(text)
    PIEremoveElement(text);
  geometry = getGeometry(flag,1);
  material = new THREE.MeshBasicMaterial({color:0xffffff});
  text = new THREE.Mesh(geometry, material);
  text.position.set(5,5,5);
  PIEaddElement(text);

  geometry = getGeometry(flag2,1);
  material = new THREE.MeshBasicMaterial({color:0xffffff});
  text = new THREE.Mesh(geometry, material);
  text.position.set(3,3,3);
  PIEaddElement(text);


  geometry = getGeometry(res,1);
  material = new THREE.MeshBasicMaterial({color:0xffffff});
  text = new THREE.Mesh(geometry, material);
  text.position.set(1,1,1);
  PIEaddElement(text);


}

function getNumber1(newValue)
{
    num1 = newValue.toFixed(2);
}

function getNumber2(newValue)
{
    num2 = newValue.toFixed(2);
}

function setSlider()
{
    setSliderVariables();

    PIEaddInputSlider(numberLabel1, num1, getNumber1, minNumber, maxNumber, numberStep);
    PIEaddInputSlider(numberLabel2, num2, getNumber2, minNumber, maxNumber, numberStep);
    num1 = num1.toFixed(2);
    num2 = num2.toFixed(2);

}

function setSliderVariables()
{
    numberLabel1 = "Number 1";
    numberLabel2 = "Number 2";


    num1 = flag;
    num2 = flag2;

    minNumber  = 0.01;
    maxNumber  = 9.99;
    numberStep = 0.01;
}
var mySceneTLX;
var mySceneTLY;
var mySceneBRX;
var mySceneBRY;
var mySceneW;
var mySceneH;
var myCenterX;
var myCenterY;


var font,flag = Math.floor(Math.random()*100) ,text;
var flag2 = Math.floor(Math.random()*100);
var res = flag+flag2;


var numberLabel1;
var numberLabel2;
var minNumber, maxNumber, numberStep,num1,num2;

function initialiseScene()
{

    mySceneTLX = -10.0;
    mySceneTLY = 10.0;
    mySceneBRX = 10.0;
    mySceneBRY = -10.0;
    mySceneW   = (mySceneBRX - mySceneTLX);
    mySceneH   = (mySceneTLY - mySceneBRY);
    myCenterX  = (mySceneTLX + mySceneBRX) / 2.0;
    myCenterY  = (mySceneTLY + mySceneBRY) / 2.0;
    myCenterZ  = -2.0;

    PIEscene.background=new THREE.Color( 0xbfd1e5 );
    PIEscene.add(new THREE.AmbientLight(0x606060));
}
function loadFont()
{
    loader = new THREE.FontLoader();
    loader.load("fonts/optimer.json", function(response){
        font = response;
    });
}
function loadExperimentElements()
{

    PIEsetExperimentTitle("Two digit addition using money");
    PIEsetDeveloperName("Govind Daga");

    loadFont();
    initialiseScene();

    setSlider();
    PIEsetAreaOfInterest(mySceneTLX, mySceneTLY, mySceneBRX, mySceneBRY);

    // for texture



}

function getGeometry(data, size)
{
    geometry = new THREE.TextGeometry(data, {
            font : font,
            size : size ,
            height : 0.01,
            curveSegments : 3
    });
    return geometry;
}

function resetExperiment()
{

}

function updateExperimentElements(t, dt)
{
  if(font) {
  test();
}
}

function test()
{
  if(text)
    PIEremoveElement(text);
  geometry = getGeometry(flag,1);
  material = new THREE.MeshBasicMaterial({color:0xffffff});
  text = new THREE.Mesh(geometry, material);
  text.position.set(5,5,5);
  PIEaddElement(text);

  geometry = getGeometry(flag2,1);
  material = new THREE.MeshBasicMaterial({color:0xffffff});
  text = new THREE.Mesh(geometry, material);
  text.position.set(3,3,3);
  PIEaddElement(text);


  geometry = getGeometry(res,1);
  material = new THREE.MeshBasicMaterial({color:0xffffff});
  text = new THREE.Mesh(geometry, material);
  text.position.set(1,1,1);
  PIEaddElement(text);


}

function getNumber1(newValue)
{
    num1 = newValue.toFixed(2);
}

function getNumber2(newValue)
{
    num2 = newValue.toFixed(2);
}

function setSlider()
{
    setSliderVariables();

    PIEaddInputSlider(numberLabel1, num1, getNumber1, minNumber, maxNumber, numberStep);
    PIEaddInputSlider(numberLabel2, num2, getNumber2, minNumber, maxNumber, numberStep);
    num1 = num1.toFixed(2);
    num2 = num2.toFixed(2);

}

function setSliderVariables()
{
    numberLabel1 = "Number 1";
    numberLabel2 = "Number 2";


    num1 = flag;
    num2 = flag2;

    minNumber  = 0.01;
    maxNumber  = 9.99;
    numberStep = 0.01;
}
